; Script generated by the Inno Script Studio Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "UCH Black Sheep Texture Mod"
#define MyAppVersion "1.0"
#define MyAppPublisher "Grim Stride"
#define MyAppURL "https://github.com/GrimStride/"
#define MyAppExeName "BlackSheepTexMod.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{CFB31A33-F5DA-4752-BCCB-B663EC705486}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL=https://github.com/GrimStride/BlackSheep
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
CreateAppDir=no
LicenseFile=C:\inno\LICENSE.txt
OutputDir=C:\inno
OutputBaseFilename=BlackSheepTexMod
Compression=lzma
SolidCompression=yes
Uninstallable=no
PrivilegesRequired=lowest
UsePreviousPrivileges=False
DisableWelcomePage=False
DisableReadyPage=True
AppCopyright=https://github.com/GrimStride/BlackSheep

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"
Name: "spanish"; MessagesFile: "compiler:Languages\Spanish.isl"

[CustomMessages]
spanish.ManualDir=Introducir carpeta del juego manualmente
english.ManualDir=Enter game folder manually
english.Browse=Browse...
spanish.Browse=Examinar...
english.AutoDir=Detect game folder automatically
spanish.AutoDir=Detectar carpeta del juego automáticamente
english.Step=Step
spanish.Step=Paso
english.Label1=In order to install the content, game folder must be provided
spanish.Label1=Para instalar el contenido, se requiere la carpeta del juego.

[Code]
var
 Page, Page2: TWizardPage;
 Fol: string;
 Edit: TEdit;
 RadioButton, RadioButton2: TNewRadioButton;
 Button, FormButton: TButton;
 OutputProgressWizardPage: TOutputProgressWizardPage;
 OutputProgressWizardPageAfterID: Integer;
 Stmpath : string;

procedure CheckRadio(Sender: TObject);
begin
  if RadioButton.Checked = True then
  begin
    Edit.Enabled := False;
    Button.Enabled := False;
  end else begin
    Edit.Enabled := True;
    Button.Enabled := True;
  end;
end;
procedure SelectDir(Sender: TObject);
var
  Dir: string;
begin
  if BrowseForFolder(SetupMessage(msgBrowseDialogLabel), Dir, True) then
  begin
    Edit.Text := Dir
  end;
end;

procedure installProg;
var
  Position, Max: Integer;
begin
{try
      Max := 25;
      for Position := 0 to Max do begin
        OutputProgressWizardPage.SetProgress(Position, Max);
        OutputProgressWizardPage.SetText('hi', 'no');
        if Position = 0 then
          OutputProgressWizardPage.Show;
        Sleep(2000 div Max);
      end;
    finally
      OutputProgressWizardPage.Hide;
     end;}
OutputProgressWizardPage.Show;
OutputProgressWizardPage.SetProgress(0, 5);
//try
  //
  //OutputProgressWizardPage.Show;
  if Fol = '' then
    Log('no found');
    OutputProgressWizardPage.SetText('Searching steam folder location', 'Analyzing registry');
  if RegKeyExists(HKLM, 'SOFTWARE\WOW6432Node\Valve\Steam') then begin
    RegQueryStringValue(HKLM, 'SOFTWARE\WOW6432Node\Valve\Steam\NSIS', 'Path', Stmpath)
    //Log(Stmpath);
    Sleep(80);
    OutputProgressWizardPage.SetText('Searching steam folder location', 'Steam installation directory found');
    OutputProgressWizardPage.SetProgress(1, 5);
  end else begin
    OutputProgressWizardPage.SetText('Searching steam folder location', 'Steam not found in registry');
    //OutputProgressWizardPage.SetProgress(1, 25);
    OutputProgressWizardPage.SetText('Searching origin folder location', 'Analyzing registry');
    if RegKeyExists(HKLM, 'SOFTWARE\Wow6432Node\Electronic Arts\EA Core') then begin
      RegQueryStringValue(HKLM, 'SOFTWARE\WOW6432Node\Electronic Arts\EA Core', 'EADM6InstallDir', Stmpath);
      OutputProgressWizardPage.SetText('Searching steam folder location', 'Origin installation directory found');
      OutputProgressWizardPage.SetProgress(2, 5);
      end;
  end;
  //OutputProgressWizardPage.SetProgress(1, 25);
  //Sleep(2000);
  Sleep(80)
  OutputProgressWizardPage.SetProgress(3, 5);
  Sleep(80);
  OutputProgressWizardPage.SetProgress(4, 5);
  Sleep(80);
  OutputProgressWizardPage.SetProgress(5, 5);
  Sleep(2000)
//finally
  OutputProgressWizardPage.Hide;
  //end;
end;

function NextButtonClick(CurPageID: Integer): Boolean;
begin
  if CurPageID = Page.ID then
    if Edit.Enabled = True then
    begin
      if FileExists(AddBackslash(Edit.Text) + 'UltimateChickenHorse.exe') = False then
      begin
        MsgBox('Error: Invalid game folder path.'+#13#10+'Please make sure to enter the correct game folder path of Ultimate Chicken Horse', mbCriticalError, MB_OK);
        Result := False;
        Exit;
      end else begin
        Result := True;
        installProg;
      end;
    end else begin
      Result := True;
      installProg;
  end else begin
    Result := True
  end;
end; 
 
procedure MyCustomPage;
var
 V: string;
 CheckBox: TNewCheckBox;
 PasswordEdit: TPasswordEdit;
 Memo: TMemo;
 Lbl, ProgressBarLabel: TLabel;
 ComboBox: TNewComboBox;
 ListBox: TListBox;
 StaticText: TNewStaticText;
 ProgressBar: TNewProgressBar;
 CheckListBox, CheckListBox2: TNewCheckListBox;
 FolderTreeView: TFolderTreeView;
 BitmapImage, BitmapImage2, BitmapImage3: TBitmapImage;
 BitmapFileName: String;
 RichEditViewer: TRichEditViewer;
begin
  Page := CreateCustomPage(wpLicense, ExpandConstant('{cm:Step}') + '1', ExpandConstant('{cm:Label1}'));

  RadioButton := TNewRadioButton.Create(Page);
  RadioButton.Parent := Page.Surface
  RadioButton.Top := ScaleY(8);
  RadioButton.Width := Page.SurfaceWidth;
  RadioButton.Left := ScaleX(4)
  RadioButton.Caption := ExpandConstant('{cm:AutoDir}');
  RadioButton.Checked := True;
  RadioButton.OnClick := @CheckRadio;

  RadioButton2 := TNewRadioButton.Create(Page);
  RadioButton2.Parent := Page.Surface
  RadioButton2.Top := Radiobutton.Top + ScaleY(20);
  RadioButton2.Width := Page.SurfaceWidth;
  RadioButton2.Left := ScaleX(4)
  RadioButton2.Caption := ExpandConstant('{cm:ManualDir}');
  RadioButton2.OnClick := @CheckRadio;

  Edit := TNewEdit.Create(Page);
  Edit.Left := ScaleX(20);
  Edit.Top := ScaleY(50);
  Edit.Width := Page.SurfaceWidth div 2 + ScaleX(64);
  Edit.Text := Fol;
  Edit.Parent := Page.Surface;
  Edit.Enabled := False;

  Button := TNewButton.Create(Page);
  Button.Caption := ExpandConstant('{cm:Browse}');
  Button.Top := Edit.Top - 1
  Button.Left := Edit.Width + ScaleX(30)
  Button.Width := WizardForm.CalculateButtonWidth([Button.Caption]);
  Button.Height := ScaleY(23);
  Button.OnClick := @SelectDir;
  Button.Enabled := False;
  Button.Parent := Page.Surface;

  OutputProgressWizardPage := CreateOutputProgressPage(ExpandConstant('{cm:Step}') + '2', 'Installing modifications');
  OutputProgressWizardPageAfterID := Page.ID;
end;
  {//Result := True;
  if not RegKeyExists(HKCU, 'SOFTWARE\Valve\Steam') then
  begin
    // return False to prevent installation to continue
    //Result := False;
    Log('haha xd');
    // and display a message box
    MsgBox('please install ABC first!!', mbError, MB_OK);
  end else begin
   Log('yeah it is installed')
   RegQueryStringValue(HKCU, 'SOFTWARE\Valve\Steam', 'SteamPath', V)
   Log(V)
  end;}
//end;

procedure InitializeWizard();
begin
  MyCustomPage;
end;
